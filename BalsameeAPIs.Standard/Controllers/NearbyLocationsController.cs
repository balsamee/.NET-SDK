/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class NearbyLocationsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static NearbyLocationsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static NearbyLocationsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new NearbyLocationsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_type_in_region  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>Auto-complete over the sent substring  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- type : clinic or hospital ... etc  
        /// 2- region_id : region code ... you got it with get_regions action in the first call to api  
        /// 3- country : country code ... you got it with get_regions action in the first call to api  
        /// 4- langauge : the langauge in which the results will come with  
        /// # Response/JSON :-
        /// { <b>data:</b> array of results for query sent }, <b>status: :ok</b>  
        /// <b>Every Reply in the array consists of:</b>  
        /// 1- formatted_address  
        /// 2- name  
        /// 3- place_id : unique identifier for that place and could be sent to get datails about that result  
        /// 4- latitude  
        /// 5- longitude  
        /// 6- photo_url  
        /// </summary>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="regionId">Required parameter: Example: </param>
        /// <param name="country">Required parameter: Example: </param>
        /// <param name="langauge">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsGetTypeInRegionGet(
                string type,
                string regionId,
                string country,
                string langauge,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsGetTypeInRegionGetAsync(type, regionId, country, langauge, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_type_in_region  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>Auto-complete over the sent substring  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- type : clinic or hospital ... etc  
        /// 2- region_id : region code ... you got it with get_regions action in the first call to api  
        /// 3- country : country code ... you got it with get_regions action in the first call to api  
        /// 4- langauge : the langauge in which the results will come with  
        /// # Response/JSON :-
        /// { <b>data:</b> array of results for query sent }, <b>status: :ok</b>  
        /// <b>Every Reply in the array consists of:</b>  
        /// 1- formatted_address  
        /// 2- name  
        /// 3- place_id : unique identifier for that place and could be sent to get datails about that result  
        /// 4- latitude  
        /// 5- longitude  
        /// 6- photo_url  
        /// </summary>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="regionId">Required parameter: Example: </param>
        /// <param name="country">Required parameter: Example: </param>
        /// <param name="langauge">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsGetTypeInRegionGetAsync(
                string type,
                string regionId,
                string country,
                string langauge,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/get_type_in_region");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "type", type },
                { "region_id", regionId },
                { "country", country },
                { "langauge", langauge }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/autocomplete  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>Auto-complete over the sent substring  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- input : string you want to auto comlete  
        /// 2- langauge : the langauge in which the results will come with  
        /// 3- country : autocomplete will search through places in this cuontry  
        /// # Response/JSON :-
        /// { <b>data:</b> array of predictions for the string sent }, <b>status: :ok</b>  
        /// <b>Every prediction in the array consists of :</b>  
        /// 1- name : string value for prediction  
        /// 2- place_id :  unique id of a place to send it to details request  
        /// 3- types : types specified to the place  
        /// </summary>
        /// <param name="input">Required parameter: Example: </param>
        /// <param name="langauge">Required parameter: Example: </param>
        /// <param name="country">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsAutocompleteGet(
                string input,
                string langauge,
                string country,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsAutocompleteGetAsync(input, langauge, country, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/autocomplete  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>Auto-complete over the sent substring  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- input : string you want to auto comlete  
        /// 2- langauge : the langauge in which the results will come with  
        /// 3- country : autocomplete will search through places in this cuontry  
        /// # Response/JSON :-
        /// { <b>data:</b> array of predictions for the string sent }, <b>status: :ok</b>  
        /// <b>Every prediction in the array consists of :</b>  
        /// 1- name : string value for prediction  
        /// 2- place_id :  unique id of a place to send it to details request  
        /// 3- types : types specified to the place  
        /// </summary>
        /// <param name="input">Required parameter: Example: </param>
        /// <param name="langauge">Required parameter: Example: </param>
        /// <param name="country">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsAutocompleteGetAsync(
                string input,
                string langauge,
                string country,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/autocomplete");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "input", input },
                { "langauge", langauge },
                { "country", country }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/details  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>get details about sme place  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- id : place id you want to get details about  
        /// 2- source : currently g for google and f for foursquare cuontry  
        /// 3- app_id
        /// # Response/JSON :-
        /// { <b>data:</b> detailed data about specified place }, <b>status: :ok</b>  
        /// <b>returned data consists of :</b>  
        /// 1- formatted_address  
        /// 2- formatted_phone_number  
        /// 3- international_phone_number  
        /// 4- photo_url
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="source">Required parameter: Example: </param>
        /// <param name="appId">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsDetailsGet(
                string id,
                string source,
                string appId,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsDetailsGetAsync(id, source, appId, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/details  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>get details about sme place  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- id : place id you want to get details about  
        /// 2- source : currently g for google and f for foursquare cuontry  
        /// 3- app_id
        /// # Response/JSON :-
        /// { <b>data:</b> detailed data about specified place }, <b>status: :ok</b>  
        /// <b>returned data consists of :</b>  
        /// 1- formatted_address  
        /// 2- formatted_phone_number  
        /// 3- international_phone_number  
        /// 4- photo_url
        /// </summary>
        /// <param name="id">Required parameter: Example: </param>
        /// <param name="source">Required parameter: Example: </param>
        /// <param name="appId">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsDetailsGetAsync(
                string id,
                string source,
                string appId,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/details");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "id", id },
                { "source", source },
                { "app_id", appId }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/text_search  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>Auto-complete over the sent substring  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- query : the search text you want to search about  
        /// 2- langauge : the langauge in which the results will come with  
        /// # Response/JSON :-
        /// { <b>data:</b> array of results for query sent }, <b>status: :ok</b>  
        /// <b>Every Reply in the array consists of:</b>  
        /// 1- formatted_address  
        /// 2- name  
        /// 3- place_id : unique identifier for that place and could be sent to get datails about that result  
        /// 4- latitude  
        /// 5- longitude
        /// </summary>
        /// <param name="query">Required parameter: Example: </param>
        /// <param name="langauge">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsTextSearchGet(
                string query,
                string langauge,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsTextSearchGetAsync(query, langauge, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/text_search  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>Auto-complete over the sent substring  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- query : the search text you want to search about  
        /// 2- langauge : the langauge in which the results will come with  
        /// # Response/JSON :-
        /// { <b>data:</b> array of results for query sent }, <b>status: :ok</b>  
        /// <b>Every Reply in the array consists of:</b>  
        /// 1- formatted_address  
        /// 2- name  
        /// 3- place_id : unique identifier for that place and could be sent to get datails about that result  
        /// 4- latitude  
        /// 5- longitude
        /// </summary>
        /// <param name="query">Required parameter: Example: </param>
        /// <param name="langauge">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsTextSearchGetAsync(
                string query,
                string langauge,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/text_search");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "query", query },
                { "langauge", langauge }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/photo  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return photo_url of photo_reference  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- photoreference : unique identifier of photo ... usualy comes in search  
        /// 2- maxwidth : the width you want of the photo  
        /// # Response/JSON :-
        /// { <b>data:</b> photo_url }, <b>status: :ok</b>  
        /// </summary>
        /// <param name="photoreference">Required parameter: Example: </param>
        /// <param name="maxwidth">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsPhotoGet(
                string photoreference,
                string maxwidth,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsPhotoGetAsync(photoreference, maxwidth, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/photo  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return photo_url of photo_reference  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- photoreference : unique identifier of photo ... usualy comes in search  
        /// 2- maxwidth : the width you want of the photo  
        /// # Response/JSON :-
        /// { <b>data:</b> photo_url }, <b>status: :ok</b>  
        /// </summary>
        /// <param name="photoreference">Required parameter: Example: </param>
        /// <param name="maxwidth">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsPhotoGetAsync(
                string photoreference,
                string maxwidth,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/photo");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "photoreference", photoreference },
                { "maxwidth", maxwidth }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_name_of_country  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return name of country  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- latitude  
        /// 2- longitude  
        /// # Response/JSON :-
        /// { <b>data:</b> name of country }, <b>status: :ok</b>  
        /// </summary>
        /// <param name="latitude">Required parameter: Example: </param>
        /// <param name="longitude">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsGetNameOfCountryGet(
                string latitude,
                string longitude,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsGetNameOfCountryGetAsync(latitude, longitude, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_name_of_country  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return name of country  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- latitude  
        /// 2- longitude  
        /// # Response/JSON :-
        /// { <b>data:</b> name of country }, <b>status: :ok</b>  
        /// </summary>
        /// <param name="latitude">Required parameter: Example: </param>
        /// <param name="longitude">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsGetNameOfCountryGetAsync(
                string latitude,
                string longitude,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/get_name_of_country");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "latitude", latitude },
                { "longitude", longitude }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_regions_of_country  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return regions of country  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- latitude  
        /// 2- longitude  
        /// # Response/JSON :-
        /// { <b>data:</b> {} }, <b>status: :ok</b>  
        /// data contains hash with iso-code of country and code for each region and its name
        /// </summary>
        /// <param name="latitude">Required parameter: Example: </param>
        /// <param name="longitude">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsGetRegionsOfCountryGet(
                string latitude,
                string longitude,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsGetRegionsOfCountryGetAsync(latitude, longitude, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_regions_of_country  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return regions of country  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- latitude  
        /// 2- longitude  
        /// # Response/JSON :-
        /// { <b>data:</b> {} }, <b>status: :ok</b>  
        /// data contains hash with iso-code of country and code for each region and its name
        /// </summary>
        /// <param name="latitude">Required parameter: Example: </param>
        /// <param name="longitude">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsGetRegionsOfCountryGetAsync(
                string latitude,
                string longitude,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/get_regions_of_country");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "latitude", latitude },
                { "longitude", longitude }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_regions_and_places_in_country  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return regions of country text search with type in that country  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- latitude  
        /// 2- longitude  
        /// 3- type : clinic or hospital ... etc  
        /// # Response/JSON :-
        /// { <b>data:</b> {} }, <b>status: :ok</b>  
        /// data is the same as get_regions + get_type_in_region
        /// </summary>
        /// <param name="latitude">Required parameter: Example: </param>
        /// <param name="longitude">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsGetRegionsAndPlacesInCountryGet(
                string latitude,
                string longitude,
                string type,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsGetRegionsAndPlacesInCountryGetAsync(latitude, longitude, type, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_regions_and_places_in_country  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return regions of country text search with type in that country  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- latitude  
        /// 2- longitude  
        /// 3- type : clinic or hospital ... etc  
        /// # Response/JSON :-
        /// { <b>data:</b> {} }, <b>status: :ok</b>  
        /// data is the same as get_regions + get_type_in_region
        /// </summary>
        /// <param name="latitude">Required parameter: Example: </param>
        /// <param name="longitude">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsGetRegionsAndPlacesInCountryGetAsync(
                string latitude,
                string longitude,
                string type,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/get_regions_and_places_in_country");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "latitude", latitude },
                { "longitude", longitude },
                { "type", type }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/foursquare_plces_search  
        /// <b>Method : </b>GET  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- latitude  
        /// 2- longitude  
        /// 3- type : clinic or hospital ... etc  
        /// # Response/JSON :-
        /// { <b>data:</b> array of results for query sent }, <b>status: :ok</b>  
        /// <b>Every Reply in the array consists of:</b>  
        /// 1- formatted_address  
        /// 2- name  
        /// 3- place_id : unique identifier for that place and could be sent to get datails about that result  
        /// 4- latitude  
        /// 5- longitude  
        /// 6- photo_url  
        /// </summary>
        /// <param name="latitude">Required parameter: Example: </param>
        /// <param name="longitude">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsFoursquarePlcesSearchGet(
                string latitude,
                string longitude,
                string type,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsFoursquarePlcesSearchGetAsync(latitude, longitude, type, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/foursquare_plces_search  
        /// <b>Method : </b>GET  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- latitude  
        /// 2- longitude  
        /// 3- type : clinic or hospital ... etc  
        /// # Response/JSON :-
        /// { <b>data:</b> array of results for query sent }, <b>status: :ok</b>  
        /// <b>Every Reply in the array consists of:</b>  
        /// 1- formatted_address  
        /// 2- name  
        /// 3- place_id : unique identifier for that place and could be sent to get datails about that result  
        /// 4- latitude  
        /// 5- longitude  
        /// 6- photo_url  
        /// </summary>
        /// <param name="latitude">Required parameter: Example: </param>
        /// <param name="longitude">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsFoursquarePlcesSearchGetAsync(
                string latitude,
                string longitude,
                string type,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/foursquare_plces_search");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "latitude", latitude },
                { "longitude", longitude },
                { "type", type }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_foursquare_photo_url  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return photo_url of photo_reference  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- place_id : place id you want to get details about  
        /// # Response/JSON :-
        /// { <b>data:</b> photo_url }, <b>status: :ok</b>  
        /// </summary>
        /// <param name="placeId">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MapsGetFoursquarePhotoUrlGet(
                string placeId,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5MapsGetFoursquarePhotoUrlGetAsync(placeId, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/maps/get_foursquare_photo_url  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>return photo_url of photo_reference  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- place_id : place id you want to get details about  
        /// # Response/JSON :-
        /// { <b>data:</b> photo_url }, <b>status: :ok</b>  
        /// </summary>
        /// <param name="placeId">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MapsGetFoursquarePhotoUrlGetAsync(
                string placeId,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/maps/get_foursquare_photo_url");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "place_id", placeId }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 