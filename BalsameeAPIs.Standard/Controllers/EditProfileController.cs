/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class EditProfileController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static EditProfileController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static EditProfileController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new EditProfileController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="individualFirstName">Required parameter: Example: </param>
        /// <param name="individualLastName">Required parameter: Example: </param>
        /// <param name="individualAvatar">Required parameter: Example: </param>
        /// <param name="individualAddressStreet">Required parameter: Example: </param>
        /// <param name="individualAddressBuilding">Required parameter: Example: </param>
        /// <param name="individualAddressCity">Required parameter: Example: </param>
        /// <param name="individualAddressCountry">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void UpdateApiV5UpdateProfilePatch(
                string xAuthenticationToken,
                string xSessionId,
                string individualFirstName,
                string individualLastName,
                string individualAvatar,
                string individualAddressStreet,
                string individualAddressBuilding,
                string individualAddressCity,
                string individualAddressCountry)
        {
            Task t = UpdateApiV5UpdateProfilePatchAsync(xAuthenticationToken, xSessionId, individualFirstName, individualLastName, individualAvatar, individualAddressStreet, individualAddressBuilding, individualAddressCity, individualAddressCountry);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="individualFirstName">Required parameter: Example: </param>
        /// <param name="individualLastName">Required parameter: Example: </param>
        /// <param name="individualAvatar">Required parameter: Example: </param>
        /// <param name="individualAddressStreet">Required parameter: Example: </param>
        /// <param name="individualAddressBuilding">Required parameter: Example: </param>
        /// <param name="individualAddressCity">Required parameter: Example: </param>
        /// <param name="individualAddressCountry">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task UpdateApiV5UpdateProfilePatchAsync(
                string xAuthenticationToken,
                string xSessionId,
                string individualFirstName,
                string individualLastName,
                string individualAvatar,
                string individualAddressStreet,
                string individualAddressBuilding,
                string individualAddressCity,
                string individualAddressCountry)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/update_profile");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-Session-Id", xSessionId }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "individual[first_name]", individualFirstName ),
                new KeyValuePair<string, object>( "individual[last_name]", individualLastName ),
                new KeyValuePair<string, object>( "individual[avatar]", individualAvatar ),
                new KeyValuePair<string, object>( "individual[address[street]]", individualAddressStreet ),
                new KeyValuePair<string, object>( "individual[address[building]]", individualAddressBuilding ),
                new KeyValuePair<string, object>( "individual[address[city]]", individualAddressCity ),
                new KeyValuePair<string, object>( "individual[address[country]]", individualAddressCountry )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Patch(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// first step to edit .. 
        /// sends confirmation and save it in the cache
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="identifier">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5IndividualsEditIdentifierPost(
                string xAuthenticationToken,
                string xSessionId,
                string identifier,
                string type)
        {
            Task t = CreateApiV5IndividualsEditIdentifierPostAsync(xAuthenticationToken, xSessionId, identifier, type);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// first step to edit .. 
        /// sends confirmation and save it in the cache
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="identifier">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5IndividualsEditIdentifierPostAsync(
                string xAuthenticationToken,
                string xSessionId,
                string identifier,
                string type)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/individuals/edit_identifier");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-Session-Id", xSessionId }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "identifier", identifier ),
                new KeyValuePair<string, object>( "type", type )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// final step to confirm the update ..
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="identifier">Required parameter: Example: </param>
        /// <param name="confirmationCode">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5IndividualsUpdateIdentifierPost(
                string xAuthenticationToken,
                string xSessionId,
                string identifier,
                string confirmationCode,
                string type)
        {
            Task t = CreateApiV5IndividualsUpdateIdentifierPostAsync(xAuthenticationToken, xSessionId, identifier, confirmationCode, type);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// final step to confirm the update ..
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="identifier">Required parameter: Example: </param>
        /// <param name="confirmationCode">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5IndividualsUpdateIdentifierPostAsync(
                string xAuthenticationToken,
                string xSessionId,
                string identifier,
                string confirmationCode,
                string type)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/individuals/update_identifier");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-Session-Id", xSessionId }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "identifier", identifier ),
                new KeyValuePair<string, object>( "confirmation_code", confirmationCode ),
                new KeyValuePair<string, object>( "type", type )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 