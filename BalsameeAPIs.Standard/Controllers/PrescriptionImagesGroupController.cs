/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class PrescriptionImagesGroupController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static PrescriptionImagesGroupController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static PrescriptionImagesGroupController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new PrescriptionImagesGroupController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <param name="prescriptionImagesGroupPrescriptionImagesAttributesImage">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5ReservationRequests2668PrescriptionImagesGroupsPost(
                string xSessionId,
                string xAuthenticationToken,
                string xAppId,
                string prescriptionImagesGroupPrescriptionImagesAttributesImage)
        {
            Task t = CreateApiV5ReservationRequests2668PrescriptionImagesGroupsPostAsync(xSessionId, xAuthenticationToken, xAppId, prescriptionImagesGroupPrescriptionImagesAttributesImage);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <param name="prescriptionImagesGroupPrescriptionImagesAttributesImage">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5ReservationRequests2668PrescriptionImagesGroupsPostAsync(
                string xSessionId,
                string xAuthenticationToken,
                string xAppId,
                string prescriptionImagesGroupPrescriptionImagesAttributesImage)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reservation_requests/2668/prescription_images_groups");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "prescription_images_group[prescription_images_attributes][][image]", prescriptionImagesGroupPrescriptionImagesAttributesImage )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 