/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class EventsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static EventsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static EventsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new EventsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// Search for entities that have public events within next 30 days
        /// params
        /// 	- page => page number
        /// 	- per_page => number of rows you need per page, default: 10
        /// 	- type => the entity type ["Enterprise", "Clinic", "InsuranceCompany", "Hospital", "MedicalCenter", "Ngo", "Lab", "Pharmacy"] 
        /// 		"this is optional, if not specified it searches for all entity types with no restriction", this is in the url not query, events/:type/...
        /// 	- entity_name => the name of a specific entity
        /// </summary>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="entityName">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5EventsEntitiesGet(
                int page,
                string entityName,
                string xSessionId,
                string xAuthenticationToken)
        {
            Task t = GetApiV5EventsEntitiesGetAsync(page, entityName, xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Search for entities that have public events within next 30 days
        /// params
        /// 	- page => page number
        /// 	- per_page => number of rows you need per page, default: 10
        /// 	- type => the entity type ["Enterprise", "Clinic", "InsuranceCompany", "Hospital", "MedicalCenter", "Ngo", "Lab", "Pharmacy"] 
        /// 		"this is optional, if not specified it searches for all entity types with no restriction", this is in the url not query, events/:type/...
        /// 	- entity_name => the name of a specific entity
        /// </summary>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="entityName">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5EventsEntitiesGetAsync(
                int page,
                string entityName,
                string xSessionId,
                string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/events/entities");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "page", page },
                { "entity_name", entityName }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Search for entities that have public events within next 30 days
        /// params
        ///   - page => page number
        ///   - per_page => number of rows you need per page, default: 10
        ///   - type => the entity type ["Enterprise", "Clinic", "InsuranceCompany", "Hospital", "MedicalCenter", "Ngo", "Lab", "Pharmacy"] 
        ///     "this is optional, if not specified it searches for all entity types with no restriction", this is in the url not query, events/:type/...
        ///   - entity_name => the name of a specific entity
        /// </summary>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5EventsSearchGet(int page, string xSessionId, string xAuthenticationToken)
        {
            Task t = GetApiV5EventsSearchGetAsync(page, xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Search for entities that have public events within next 30 days
        /// params
        ///   - page => page number
        ///   - per_page => number of rows you need per page, default: 10
        ///   - type => the entity type ["Enterprise", "Clinic", "InsuranceCompany", "Hospital", "MedicalCenter", "Ngo", "Lab", "Pharmacy"] 
        ///     "this is optional, if not specified it searches for all entity types with no restriction", this is in the url not query, events/:type/...
        ///   - entity_name => the name of a specific entity
        /// </summary>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5EventsSearchGetAsync(int page, string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/events/search");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "page", page }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Search for doctors that have public events within next 30 days
        /// 	params
        /// 		- page => page number 
        /// 		- per_page => number of rows you need per page, default: 10 
        /// 		- doctor_name
        /// 		- doctor_spec
        /// 		- entity_id
        /// 		- 
        /// 		all params are optional, filter by any of them
        /// </summary>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="perPage">Required parameter: Example: </param>
        /// <param name="entityId">Required parameter: Example: </param>
        /// <param name="doctorName">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5EventsDoctorsGet(
                int page,
                int perPage,
                int entityId,
                string doctorName,
                string xSessionId,
                string xAuthenticationToken)
        {
            Task t = GetApiV5EventsDoctorsGetAsync(page, perPage, entityId, doctorName, xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Search for doctors that have public events within next 30 days
        /// 	params
        /// 		- page => page number 
        /// 		- per_page => number of rows you need per page, default: 10 
        /// 		- doctor_name
        /// 		- doctor_spec
        /// 		- entity_id
        /// 		- 
        /// 		all params are optional, filter by any of them
        /// </summary>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="perPage">Required parameter: Example: </param>
        /// <param name="entityId">Required parameter: Example: </param>
        /// <param name="doctorName">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5EventsDoctorsGetAsync(
                int page,
                int perPage,
                int entityId,
                string doctorName,
                string xSessionId,
                string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/events/doctors");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "page", page },
                { "per_page", perPage },
                { "entity_id", entityId },
                { "doctor_name", doctorName }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="dateGrouped">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5EventsGet(bool dateGrouped, string xSessionId, string xAuthenticationToken)
        {
            Task t = GetApiV5EventsGetAsync(dateGrouped, xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="dateGrouped">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5EventsGetAsync(bool dateGrouped, string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/events");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "date_grouped", dateGrouped }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 