/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class RadiologyRequestImageGroupController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static RadiologyRequestImageGroupController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static RadiologyRequestImageGroupController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new RadiologyRequestImageGroupController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="radiologyRequestImageGroupRadiologyRequestImagesAttributesImage">Required parameter: Example: </param>
        /// <return>Returns the Models.Uploadradiologyrequestimagegroupfileforreservationrequestcopy response from the API call</return>
        public Models.Uploadradiologyrequestimagegroupfileforreservationrequestcopy CreateApiV5ReservationRequests4323RadiologyRequestImageGroupsPost(string xSessionId, string xAuthenticationToken, string radiologyRequestImageGroupRadiologyRequestImagesAttributesImage)
        {
            Task<Models.Uploadradiologyrequestimagegroupfileforreservationrequestcopy> t = CreateApiV5ReservationRequests4323RadiologyRequestImageGroupsPostAsync(xSessionId, xAuthenticationToken, radiologyRequestImageGroupRadiologyRequestImagesAttributesImage);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="radiologyRequestImageGroupRadiologyRequestImagesAttributesImage">Required parameter: Example: </param>
        /// <return>Returns the Models.Uploadradiologyrequestimagegroupfileforreservationrequestcopy response from the API call</return>
        public async Task<Models.Uploadradiologyrequestimagegroupfileforreservationrequestcopy> CreateApiV5ReservationRequests4323RadiologyRequestImageGroupsPostAsync(string xSessionId, string xAuthenticationToken, string radiologyRequestImageGroupRadiologyRequestImagesAttributesImage)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reservation_requests/4323/radiology_request_image_groups");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "radiology_request_image_group[radiology_request_images_attributes][][image]", radiologyRequestImageGroupRadiologyRequestImagesAttributesImage )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Uploadradiologyrequestimagegroupfileforreservationrequestcopy>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the Models.Listradiologyrequestimagegroupfileforreservationrequest response from the API call</return>
        public Models.Listradiologyrequestimagegroupfileforreservationrequest GetApiV5ReservationRequests4323RadiologyRequestImageGroupsGet(string xSessionId, string xAuthenticationToken)
        {
            Task<Models.Listradiologyrequestimagegroupfileforreservationrequest> t = GetApiV5ReservationRequests4323RadiologyRequestImageGroupsGetAsync(xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the Models.Listradiologyrequestimagegroupfileforreservationrequest response from the API call</return>
        public async Task<Models.Listradiologyrequestimagegroupfileforreservationrequest> GetApiV5ReservationRequests4323RadiologyRequestImageGroupsGetAsync(string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reservation_requests/4323/radiology_request_image_groups");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Listradiologyrequestimagegroupfileforreservationrequest>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="radiologyRequestImageGroupRadiologyRequestImagesAttributesImage">Required parameter: Example: </param>
        /// <return>Returns the Models.Uploadradiologyrequestimagegroupfile response from the API call</return>
        public Models.Uploadradiologyrequestimagegroupfile CreateApiV5RadiologyRequestImageGroupsPost(string xSessionId, string xAuthenticationToken, string radiologyRequestImageGroupRadiologyRequestImagesAttributesImage)
        {
            Task<Models.Uploadradiologyrequestimagegroupfile> t = CreateApiV5RadiologyRequestImageGroupsPostAsync(xSessionId, xAuthenticationToken, radiologyRequestImageGroupRadiologyRequestImagesAttributesImage);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="radiologyRequestImageGroupRadiologyRequestImagesAttributesImage">Required parameter: Example: </param>
        /// <return>Returns the Models.Uploadradiologyrequestimagegroupfile response from the API call</return>
        public async Task<Models.Uploadradiologyrequestimagegroupfile> CreateApiV5RadiologyRequestImageGroupsPostAsync(string xSessionId, string xAuthenticationToken, string radiologyRequestImageGroupRadiologyRequestImagesAttributesImage)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/radiology_request_image_groups");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "radiology_request_image_group[radiology_request_images_attributes][][image]", radiologyRequestImageGroupRadiologyRequestImagesAttributesImage )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Uploadradiologyrequestimagegroupfile>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the Models.Listradiologyrequestimagegroupfile response from the API call</return>
        public Models.Listradiologyrequestimagegroupfile GetApiV5RadiologyRequestImageGroupsGet(string xSessionId, string xAuthenticationToken)
        {
            Task<Models.Listradiologyrequestimagegroupfile> t = GetApiV5RadiologyRequestImageGroupsGetAsync(xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the Models.Listradiologyrequestimagegroupfile response from the API call</return>
        public async Task<Models.Listradiologyrequestimagegroupfile> GetApiV5RadiologyRequestImageGroupsGetAsync(string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/radiology_request_image_groups");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Listradiologyrequestimagegroupfile>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

    }
} 