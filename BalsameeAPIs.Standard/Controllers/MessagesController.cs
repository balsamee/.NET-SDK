/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class MessagesController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static MessagesController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static MessagesController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new MessagesController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        ///  # URL         => /messages/get
        ///   # Method      => GET
        ///   # Description => Get List of Messages
        ///   #==Parameters
        ///   # range => represent the number of messages per page (default => 500)
        ///   # page  => page number (default => 1)
        ///   # email => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # {success: true , messages: array_of_messages}
        ///   # Every message in the array consists of:
        ///   # 1. date    => last reply date (Or message creation date if no replies)
        ///   # 2. date_unix_timestamp
        ///   # 3. id      => message id
        ///   # 4. title   => message title
        ///   # 5. is_seen => 1/0
        ///   # 6. is_sent => 1/0
        ///   # 7. Array_of_Users
        ///   #   Every user in the array consists of:
        ///   #     1. first_name
        ///   #     2. id
        ///   #     3. avatar => Object
        ///   #           {url: value , icon: {url: value},thumb: {url: value}, profile: {url: value}, profile_big: {url: value} }
        ///   # 8. last_reply => last reply on the message
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MessagesGetGet(string xSessionId, string xAuthenticationToken)
        {
            Task t = GetApiV5MessagesGetGetAsync(xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        ///  # URL         => /messages/get
        ///   # Method      => GET
        ///   # Description => Get List of Messages
        ///   #==Parameters
        ///   # range => represent the number of messages per page (default => 500)
        ///   # page  => page number (default => 1)
        ///   # email => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # {success: true , messages: array_of_messages}
        ///   # Every message in the array consists of:
        ///   # 1. date    => last reply date (Or message creation date if no replies)
        ///   # 2. date_unix_timestamp
        ///   # 3. id      => message id
        ///   # 4. title   => message title
        ///   # 5. is_seen => 1/0
        ///   # 6. is_sent => 1/0
        ///   # 7. Array_of_Users
        ///   #   Every user in the array consists of:
        ///   #     1. first_name
        ///   #     2. id
        ///   #     3. avatar => Object
        ///   #           {url: value , icon: {url: value},thumb: {url: value}, profile: {url: value}, profile_big: {url: value} }
        ///   # 8. last_reply => last reply on the message
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MessagesGetGetAsync(string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/messages/get");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        ///  # URL         => /messages/get_replies
        ///   # Method      => GET
        ///   # Description => Get List of Message Replies
        ///   #==Parameters
        ///   # range      => represent the number of replies per page (default => 500)
        ///   # page       => page number (default => 1)
        ///   # message_id => id of the messages which the required replies belongs to
        ///   # email      => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # {success: true , replies: array_of_replies}
        ///   # array_of_replies => including the 'message' itself
        ///   # Every Reply in the array consists of:
        ///   # 1. date    => creation date
        ///   # 2. date_unix_timestamp
        ///   # 3. body    => reply/message content
        ///   # 4. id
        ///   # 5. user    => owner of the current reply/message
        ///   #     Object consists of:
        ///   #     1. full_name
        ///   #     2. id
        ///   #     3. avatar => Object
        ///   #           {url: value , icon: {url: value},thumb: {url: value}, profile: {url: value}, profile_big: {url: value} }
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        ///   #   2. BadRequestError ( code: 400 )
        ///   #   3. NotFoundError   ( code: 404 )
        /// </summary>
        /// <param name="messageId">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MessagesGetRepliesGet(int messageId, string xSessionId, string xAuthenticationToken)
        {
            Task t = GetApiV5MessagesGetRepliesGetAsync(messageId, xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        ///  # URL         => /messages/get_replies
        ///   # Method      => GET
        ///   # Description => Get List of Message Replies
        ///   #==Parameters
        ///   # range      => represent the number of replies per page (default => 500)
        ///   # page       => page number (default => 1)
        ///   # message_id => id of the messages which the required replies belongs to
        ///   # email      => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # {success: true , replies: array_of_replies}
        ///   # array_of_replies => including the 'message' itself
        ///   # Every Reply in the array consists of:
        ///   # 1. date    => creation date
        ///   # 2. date_unix_timestamp
        ///   # 3. body    => reply/message content
        ///   # 4. id
        ///   # 5. user    => owner of the current reply/message
        ///   #     Object consists of:
        ///   #     1. full_name
        ///   #     2. id
        ///   #     3. avatar => Object
        ///   #           {url: value , icon: {url: value},thumb: {url: value}, profile: {url: value}, profile_big: {url: value} }
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        ///   #   2. BadRequestError ( code: 400 )
        ///   #   3. NotFoundError   ( code: 404 )
        /// </summary>
        /// <param name="messageId">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MessagesGetRepliesGetAsync(int messageId, string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/messages/get_replies");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "message_id", messageId }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # URL         => /messages/send_message
        ///   # Method      => POST
        ///   #==Parameters
        ///   # title
        ///   # body
        ///   # users_ids  => comma seperated ids of the receivers (ex: 256,10365)
        ///   # email      => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # { success: true }
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        ///   #   2. BadRequestError         ( code: 400 )
        ///   #==Description
        ///   # this function send message to required receiver, in case many receivers => a different message
        ///   # will be created for each receiver (one to one)
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="title">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="usersIds">Required parameter: Example: </param>
        /// <param name="attachment">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5MessagesSendMessagePost(
                string xSessionId,
                string xAuthenticationToken,
                string title,
                string body,
                string usersIds,
                string attachment)
        {
            Task t = CreateApiV5MessagesSendMessagePostAsync(xSessionId, xAuthenticationToken, title, body, usersIds, attachment);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # URL         => /messages/send_message
        ///   # Method      => POST
        ///   #==Parameters
        ///   # title
        ///   # body
        ///   # users_ids  => comma seperated ids of the receivers (ex: 256,10365)
        ///   # email      => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # { success: true }
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        ///   #   2. BadRequestError         ( code: 400 )
        ///   #==Description
        ///   # this function send message to required receiver, in case many receivers => a different message
        ///   # will be created for each receiver (one to one)
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="title">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="usersIds">Required parameter: Example: </param>
        /// <param name="attachment">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5MessagesSendMessagePostAsync(
                string xSessionId,
                string xAuthenticationToken,
                string title,
                string body,
                string usersIds,
                string attachment)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/messages/send_message");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "title", title ),
                new KeyValuePair<string, object>( "body", body ),
                new KeyValuePair<string, object>( "users_ids", usersIds ),
                new KeyValuePair<string, object>( "attachment", attachment )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # URL       => /messages/send_reply
        ///   # Method    => POST
        ///   #==Parameters
        ///   # body       => reply content
        ///   # message_id => send reply to the message with that ID
        ///   # email      => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # { success: true }
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        ///   #   2. BadRequestError         ( code: 400 )
        ///   #   3. ForbiddenError          ( code: 403 )
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="messageId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5MessagesSendReplyPost(
                string xSessionId,
                string xAuthenticationToken,
                string body,
                string messageId)
        {
            Task t = CreateApiV5MessagesSendReplyPostAsync(xSessionId, xAuthenticationToken, body, messageId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # URL       => /messages/send_reply
        ///   # Method    => POST
        ///   #==Parameters
        ///   # body       => reply content
        ///   # message_id => send reply to the message with that ID
        ///   # email      => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # { success: true }
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        ///   #   2. BadRequestError         ( code: 400 )
        ///   #   3. ForbiddenError          ( code: 403 )
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="body">Required parameter: Example: </param>
        /// <param name="messageId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5MessagesSendReplyPostAsync(
                string xSessionId,
                string xAuthenticationToken,
                string body,
                string messageId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/messages/send_reply");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "body", body ),
                new KeyValuePair<string, object>( "message_id", messageId )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        ///  # URL         => /messages/search_users
        ///   # Method      => GET
        ///   # Description => Search for the users which you are able to send them messages
        ///   #                Staff to Staff and patients
        ///   #                Patients to Doctors
        ///   #                Doctors to Patients which have PMR access on them and vice versa
        ///   #==Parameters
        ///   # term  => search for a user with name contains this term/pattern
        ///   # range => (Optional) default range is 10
        ///   # email => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # {success: true , messages: array_of_users}
        ///   # Every user in the array consists of:
        ///   # 1. full_name    => user full name
        ///   # 2. id           => user id
        ///   # 3. avatar       => user images urls/ with different sizes
        ///   #     Object consists of:
        ///   #       {url: value , icon: {url: value},thumb: {url: value}, profile: {url: value}, profile_big: {url: value} }
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        ///   #   2. BadRequestError         ( code: 400 )
        /// </summary>
        /// <param name="term">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5MessagesSearchUsersGet(string term, string xSessionId, string xAuthenticationToken)
        {
            Task t = GetApiV5MessagesSearchUsersGetAsync(term, xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        ///  # URL         => /messages/search_users
        ///   # Method      => GET
        ///   # Description => Search for the users which you are able to send them messages
        ///   #                Staff to Staff and patients
        ///   #                Patients to Doctors
        ///   #                Doctors to Patients which have PMR access on them and vice versa
        ///   #==Parameters
        ///   # term  => search for a user with name contains this term/pattern
        ///   # range => (Optional) default range is 10
        ///   # email => curent user email
        ///   # authentication_token => curent user authentication_token (you get this token after login/registration)
        ///   #==Response/JSON
        ///   # {success: true , messages: array_of_users}
        ///   # Every user in the array consists of:
        ///   # 1. full_name    => user full name
        ///   # 2. id           => user id
        ///   # 3. avatar       => user images urls/ with different sizes
        ///   #     Object consists of:
        ///   #       {url: value , icon: {url: value},thumb: {url: value}, profile: {url: value}, profile_big: {url: value} }
        ///   #
        ///   # NOTE: In case of error response will be => {sucess: false , code: error_code , message: error_message }
        ///   # Errors:
        ///   #   1. UnauthorizedAccessError ( code: 401 )
        ///   #   2. BadRequestError         ( code: 400 )
        /// </summary>
        /// <param name="term">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5MessagesSearchUsersGetAsync(string term, string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/messages/search_users");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "term", term }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 