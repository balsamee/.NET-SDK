/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class NewsFeedController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static NewsFeedController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static NewsFeedController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new NewsFeedController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        ///   -  NewsFeed (news and ads)
        ///   
        ///   - The response is paginated - each page contain 10 records
        ///   
        ///   - @params [Integer] page (Page number to fetch)
        ///   - @params [String] lang [ar|en]
        ///   - @params [comments_count] (will return the number of comments specified , if not specified it will return all comments)
        ///   
        ///   - Response:(JsonArray of news feed)
        ///   
        ///     - id (sequence id of news feed)
        ///     - item_type (News or Advertisement)
        ///     - if item_type is News then you will find news object
        ///       - id (news id)
        ///       - title (news title)
        ///       - cover (news cover image to display in index page)
        ///       - content_brief (breif content to display in index page)
        ///       - body (news content body (html))
        ///       - likes_count
        ///       - comments_count
        ///       - share_count
        ///       - is_liked (indicate user liked this news or not)
        ///       - saved_link_id (if user saved this news in saved posts   this key will return id of saved link else will return   null)
        ///       
        ///     - if item_type is Advertisement you will find advertisement object
        ///       - id (advertisement id)
        ///       - content (advertisement content html)
        ///       - action_tyoe: ["Internal", "External", "Static"]
        ///          - Internal: This will open internal model.
        ///          - External: will open URL
        ///          - Static: nothing to do
        ///         
        ///       - menu_action_key (this will used incase of action_type   is Internal): ["Home Care", "Near by Medical Services", "Measurements"]
        ///       
        ///       - external_url (in case of action type is external this key will contain url)
        ///     
        ///  
        ///  
        ///   - This API called if uer authenticated or not  
        ///   - in case of authenticated user. send required authentication - headers as below:  
        ///  
        ///     - X-Authentication-Token  
        ///     - X-Session-Id
        /// </summary>
        /// <param name="lang">Required parameter: Example: </param>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="commentsCount">Required parameter: Example: </param>
        /// <param name="authenticationToken">Required parameter: Example: </param>
        /// <param name="sessionId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public dynamic GetApiV5News574efc7969702d370a130000Get(
                string lang,
                int page,
                int commentsCount,
                string authenticationToken,
                string sessionId)
        {
            Task<dynamic> t = GetApiV5News574efc7969702d370a130000GetAsync(lang, page, commentsCount, authenticationToken, sessionId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        ///   -  NewsFeed (news and ads)
        ///   
        ///   - The response is paginated - each page contain 10 records
        ///   
        ///   - @params [Integer] page (Page number to fetch)
        ///   - @params [String] lang [ar|en]
        ///   - @params [comments_count] (will return the number of comments specified , if not specified it will return all comments)
        ///   
        ///   - Response:(JsonArray of news feed)
        ///   
        ///     - id (sequence id of news feed)
        ///     - item_type (News or Advertisement)
        ///     - if item_type is News then you will find news object
        ///       - id (news id)
        ///       - title (news title)
        ///       - cover (news cover image to display in index page)
        ///       - content_brief (breif content to display in index page)
        ///       - body (news content body (html))
        ///       - likes_count
        ///       - comments_count
        ///       - share_count
        ///       - is_liked (indicate user liked this news or not)
        ///       - saved_link_id (if user saved this news in saved posts   this key will return id of saved link else will return   null)
        ///       
        ///     - if item_type is Advertisement you will find advertisement object
        ///       - id (advertisement id)
        ///       - content (advertisement content html)
        ///       - action_tyoe: ["Internal", "External", "Static"]
        ///          - Internal: This will open internal model.
        ///          - External: will open URL
        ///          - Static: nothing to do
        ///         
        ///       - menu_action_key (this will used incase of action_type   is Internal): ["Home Care", "Near by Medical Services", "Measurements"]
        ///       
        ///       - external_url (in case of action type is external this key will contain url)
        ///     
        ///  
        ///  
        ///   - This API called if uer authenticated or not  
        ///   - in case of authenticated user. send required authentication - headers as below:  
        ///  
        ///     - X-Authentication-Token  
        ///     - X-Session-Id
        /// </summary>
        /// <param name="lang">Required parameter: Example: </param>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="commentsCount">Required parameter: Example: </param>
        /// <param name="authenticationToken">Required parameter: Example: </param>
        /// <param name="sessionId">Required parameter: Example: </param>
        /// <return>Returns the dynamic response from the API call</return>
        public async Task<dynamic> GetApiV5News574efc7969702d370a130000GetAsync(
                string lang,
                int page,
                int commentsCount,
                string authenticationToken,
                string sessionId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/news/574efc7969702d370a130000");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "lang", lang },
                { "page", page },
                { "comments_count", commentsCount }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "authentication_token", authenticationToken },
                { "session_id", sessionId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<dynamic>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        ///   -  NewsFeed (news and ads)
        ///   
        ///   - The response is paginated - each page contain 10 records
        ///   
        ///   - @params [Integer] page (Page number to fetch)
        ///   - @params [String] lang [ar|en]
        ///   
        ///   - Response:(JsonArray of news feed)
        ///   
        ///     - id (sequence id of news feed)
        ///     - item_type (News or Advertisement)
        ///     - if item_type is News then you will find news object
        ///       - id (news id)
        ///       - title (news title)
        ///       - cover (news cover image to display in index page)
        ///       - content_brief (breif content to display in index page)
        ///       - body (news content body (html))
        ///       - likes_count
        ///       - comments_count
        ///       - share_count
        ///       - is_liked (indicate user liked this news or not)
        ///       - saved_link_id (if user saved this news in saved posts   this key will return id of saved link else will return   null)
        ///       - special_tag
        ///             -id
        /// 			-name
        /// 			-icon
        /// 			-color (hexa)
        /// 			
        ///       
        ///     - if item_type is Advertisement you will find advertisement object
        ///       - id (advertisement id)
        ///       - content (advertisement content html)
        ///       - action_tyoe: ["Internal", "External", "Static"]
        ///          - Internal: This will open internal model.
        ///          - External: will open URL
        ///          - Static: nothing to do
        ///         
        ///       - menu_action_key (this will used incase of action_type   is Internal): ["Home Care", "Near by Medical Services", "Measurements"]
        ///       
        ///       - external_url (in case of action type is external this key will contain url)
        ///     
        ///  
        ///  
        ///   - This API called if uer authenticated or not  
        ///   - in case of authenticated user. send required authentication - headers as below:  
        ///  
        ///     - X-Authentication-Token  
        ///     - X-Session-Id
        /// </summary>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="perPage">Required parameter: Example: </param>
        /// <param name="lang">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <return>Returns the Models.Newssuccess response from the API call</return>
        public Models.Newssuccess GetApiV5NewsGet(
                int page,
                int perPage,
                string lang,
                string xAuthenticationToken,
                string xSessionId)
        {
            Task<Models.Newssuccess> t = GetApiV5NewsGetAsync(page, perPage, lang, xAuthenticationToken, xSessionId);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        ///   -  NewsFeed (news and ads)
        ///   
        ///   - The response is paginated - each page contain 10 records
        ///   
        ///   - @params [Integer] page (Page number to fetch)
        ///   - @params [String] lang [ar|en]
        ///   
        ///   - Response:(JsonArray of news feed)
        ///   
        ///     - id (sequence id of news feed)
        ///     - item_type (News or Advertisement)
        ///     - if item_type is News then you will find news object
        ///       - id (news id)
        ///       - title (news title)
        ///       - cover (news cover image to display in index page)
        ///       - content_brief (breif content to display in index page)
        ///       - body (news content body (html))
        ///       - likes_count
        ///       - comments_count
        ///       - share_count
        ///       - is_liked (indicate user liked this news or not)
        ///       - saved_link_id (if user saved this news in saved posts   this key will return id of saved link else will return   null)
        ///       - special_tag
        ///             -id
        /// 			-name
        /// 			-icon
        /// 			-color (hexa)
        /// 			
        ///       
        ///     - if item_type is Advertisement you will find advertisement object
        ///       - id (advertisement id)
        ///       - content (advertisement content html)
        ///       - action_tyoe: ["Internal", "External", "Static"]
        ///          - Internal: This will open internal model.
        ///          - External: will open URL
        ///          - Static: nothing to do
        ///         
        ///       - menu_action_key (this will used incase of action_type   is Internal): ["Home Care", "Near by Medical Services", "Measurements"]
        ///       
        ///       - external_url (in case of action type is external this key will contain url)
        ///     
        ///  
        ///  
        ///   - This API called if uer authenticated or not  
        ///   - in case of authenticated user. send required authentication - headers as below:  
        ///  
        ///     - X-Authentication-Token  
        ///     - X-Session-Id
        /// </summary>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="perPage">Required parameter: Example: </param>
        /// <param name="lang">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <return>Returns the Models.Newssuccess response from the API call</return>
        public async Task<Models.Newssuccess> GetApiV5NewsGetAsync(
                int page,
                int perPage,
                string lang,
                string xAuthenticationToken,
                string xSessionId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/news");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "page", page },
                { "per_page", perPage },
                { "lang", lang }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-Session-Id", xSessionId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Newssuccess>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        ///   -  NewsFeed (news and ads)
        ///   
        ///   - The response is paginated - each page contain 10 records
        ///   
        ///   - @params [Integer] page (Page number to fetch)
        ///   - @params [String] lang [ar|en]
        ///   
        ///   - Response:(JsonArray of news feed)
        ///   
        ///     - id (sequence id of news feed)
        ///     - item_type (News or Advertisement)
        ///     - if item_type is News then you will find news object
        ///       - id (news id)
        ///       - title (news title)
        ///       - cover (news cover image to display in index page)
        ///       - content_brief (breif content to display in index page)
        ///       - body (news content body (html))
        ///       - likes_count
        ///       - comments_count
        ///       - share_count
        ///       - is_liked (indicate user liked this news or not)
        ///       - saved_link_id (if user saved this news in saved posts   this key will return id of saved link else will return   null)
        ///       -special_tag 
        /// 			-id 
        /// 			-name
        /// 			-icon
        /// 			-color (hexa)
        ///     - if item_type is Advertisement you will find advertisement object
        ///       - id (advertisement id)
        ///       - content_body (advertisement content html)
        ///       - action_type: ["Internal", "External", "Static"]
        ///          - Internal: This will open internal model.
        ///          - External: will open URL
        ///          - Static: nothing to do
        ///         
        ///       - menu_action_key (this will used incase of action_type   is Internal): ["Home Care", "Near by Medical Services", "Measurements"]
        ///       
        ///       - external_url (in case of action type is external this key will contain url)
        ///     
        ///  
        ///  
        ///   - This API called if uer authenticated or not  
        ///   - in case of authenticated user. send required authentication - headers as below:  
        ///  
        ///     - X-Authentication-Token  
        ///     - X-Session-Id
        /// </summary>
        /// <param name="lang">Required parameter: Example: </param>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="newsTagId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5NewsFeedsGet(string lang, int page, string newsTagId)
        {
            Task t = GetApiV5NewsFeedsGetAsync(lang, page, newsTagId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        ///   -  NewsFeed (news and ads)
        ///   
        ///   - The response is paginated - each page contain 10 records
        ///   
        ///   - @params [Integer] page (Page number to fetch)
        ///   - @params [String] lang [ar|en]
        ///   
        ///   - Response:(JsonArray of news feed)
        ///   
        ///     - id (sequence id of news feed)
        ///     - item_type (News or Advertisement)
        ///     - if item_type is News then you will find news object
        ///       - id (news id)
        ///       - title (news title)
        ///       - cover (news cover image to display in index page)
        ///       - content_brief (breif content to display in index page)
        ///       - body (news content body (html))
        ///       - likes_count
        ///       - comments_count
        ///       - share_count
        ///       - is_liked (indicate user liked this news or not)
        ///       - saved_link_id (if user saved this news in saved posts   this key will return id of saved link else will return   null)
        ///       -special_tag 
        /// 			-id 
        /// 			-name
        /// 			-icon
        /// 			-color (hexa)
        ///     - if item_type is Advertisement you will find advertisement object
        ///       - id (advertisement id)
        ///       - content_body (advertisement content html)
        ///       - action_type: ["Internal", "External", "Static"]
        ///          - Internal: This will open internal model.
        ///          - External: will open URL
        ///          - Static: nothing to do
        ///         
        ///       - menu_action_key (this will used incase of action_type   is Internal): ["Home Care", "Near by Medical Services", "Measurements"]
        ///       
        ///       - external_url (in case of action type is external this key will contain url)
        ///     
        ///  
        ///  
        ///   - This API called if uer authenticated or not  
        ///   - in case of authenticated user. send required authentication - headers as below:  
        ///  
        ///     - X-Authentication-Token  
        ///     - X-Session-Id
        /// </summary>
        /// <param name="lang">Required parameter: Example: </param>
        /// <param name="page">Required parameter: Example: </param>
        /// <param name="newsTagId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5NewsFeedsGetAsync(string lang, int page, string newsTagId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/news_feeds");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "lang", lang },
                { "page", page },
                { "news_tag_id", newsTagId }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// -This function increments the share counter (initially returns = 0) whenever the user shares a post. 
        /// -The return variable name is "share_count"
        /// -To call the count incrementer call the following url news/news_id/increment_share_count?lang=en
        /// </summary>
        /// <param name="lang">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void UpdateApiV5News580f73426d61725cae000000IncrementShareCountPut(string lang)
        {
            Task t = UpdateApiV5News580f73426d61725cae000000IncrementShareCountPutAsync(lang);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// -This function increments the share counter (initially returns = 0) whenever the user shares a post. 
        /// -The return variable name is "share_count"
        /// -To call the count incrementer call the following url news/news_id/increment_share_count?lang=en
        /// </summary>
        /// <param name="lang">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task UpdateApiV5News580f73426d61725cae000000IncrementShareCountPutAsync(string lang)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/news/580f73426d61725cae000000/increment_share_count");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "lang", lang }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Put(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 