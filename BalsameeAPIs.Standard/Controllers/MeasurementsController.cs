/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class MeasurementsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static MeasurementsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static MeasurementsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new MeasurementsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/diabetes/add  
        /// <b>Method : </b>POST  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// -diabetes : String contains fields data in json (array) format  
        /// Ex: "[{ 'field_name': "" }]" --> string "[]" not json object/array  
        /// Each Object in the array consists of:  
        /// 1- field_name  
        /// 2- field_value  
        /// 3- date Or date_timestamp (with date_timestamp you don't need to send date field again in the relations array)  
        /// 4- relations => Array_of_relations  
        /// Every relation in the array consists of the same previous attributes/keys  
        /// ( date, field_name, field_value )  
        /// <b>Note in Pregnancy App</b>  
        /// "field_name" param possible values are => glucose, blood_pressure, weight  
        /// When the "field_name" value is glucose then the "field_name" value inside the relations will be  => "last meal", "activity"  
        /// The "last meal" "field_value" could be => Before Breakfast, After Breakfast, Before Lunch, After Lunch, At Fasting  
        /// The "activity"  "field_value" could be => No exercise, Light, Moderate, Heavy  
        /// # Response/JSON :-
        /// 1- {}, status: :ok  
        /// 2- {}, status: :unprocessable_entity
        /// </summary>
        /// <param name="diabetes">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5DiabetesAddPost(
                string diabetes,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = CreateApiV5DiabetesAddPostAsync(diabetes, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/diabetes/add  
        /// <b>Method : </b>POST  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// -diabetes : String contains fields data in json (array) format  
        /// Ex: "[{ 'field_name': "" }]" --> string "[]" not json object/array  
        /// Each Object in the array consists of:  
        /// 1- field_name  
        /// 2- field_value  
        /// 3- date Or date_timestamp (with date_timestamp you don't need to send date field again in the relations array)  
        /// 4- relations => Array_of_relations  
        /// Every relation in the array consists of the same previous attributes/keys  
        /// ( date, field_name, field_value )  
        /// <b>Note in Pregnancy App</b>  
        /// "field_name" param possible values are => glucose, blood_pressure, weight  
        /// When the "field_name" value is glucose then the "field_name" value inside the relations will be  => "last meal", "activity"  
        /// The "last meal" "field_value" could be => Before Breakfast, After Breakfast, Before Lunch, After Lunch, At Fasting  
        /// The "activity"  "field_value" could be => No exercise, Light, Moderate, Heavy  
        /// # Response/JSON :-
        /// 1- {}, status: :ok  
        /// 2- {}, status: :unprocessable_entity
        /// </summary>
        /// <param name="diabetes">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5DiabetesAddPostAsync(
                string diabetes,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/diabetes/add");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "diabetes", diabetes }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/diabetes/get_summary  
        /// <b>Method : </b>GET  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// # Response/JSON :-
        /// 1- <b>{measurements: Array_of_values}, status: :ok</b>  
        /// &nbsp;&nbsp;Every Value in the array (sorted by date) consists of:  
        /// &nbsp;&nbsp;1- created_at  
        /// &nbsp;&nbsp;2- date  
        /// &nbsp;&nbsp;3- date_timestamp  
        /// &nbsp;&nbsp;4- field_name  
        /// &nbsp;&nbsp;5- field_value  
        /// &nbsp;&nbsp;6- id  
        /// &nbsp;&nbsp;7- is_pmr  
        /// &nbsp;&nbsp;8- updated_at  
        /// &nbsp;&nbsp;9- user_id  
        /// &nbsp;&nbsp;10- relations   => Array_of_relations  
        /// &nbsp;&nbsp;&nbsp;&nbsp;Every relation in the array consists of the same previous attributes/keys  
        /// &nbsp;&nbsp;&nbsp;&nbsp;( created_at, date, field_name, field_value, id, is_pmr, updated_at, user_id )  
        /// 2- <b>{}, status: :unprocessable_entity</b>
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5DiabetesGetSummaryGet(string xSessionId, string xAuthenticationToken, string xAppId)
        {
            Task t = GetApiV5DiabetesGetSummaryGetAsync(xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/diabetes/get_summary  
        /// <b>Method : </b>GET  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// # Response/JSON :-
        /// 1- <b>{measurements: Array_of_values}, status: :ok</b>  
        /// &nbsp;&nbsp;Every Value in the array (sorted by date) consists of:  
        /// &nbsp;&nbsp;1- created_at  
        /// &nbsp;&nbsp;2- date  
        /// &nbsp;&nbsp;3- date_timestamp  
        /// &nbsp;&nbsp;4- field_name  
        /// &nbsp;&nbsp;5- field_value  
        /// &nbsp;&nbsp;6- id  
        /// &nbsp;&nbsp;7- is_pmr  
        /// &nbsp;&nbsp;8- updated_at  
        /// &nbsp;&nbsp;9- user_id  
        /// &nbsp;&nbsp;10- relations   => Array_of_relations  
        /// &nbsp;&nbsp;&nbsp;&nbsp;Every relation in the array consists of the same previous attributes/keys  
        /// &nbsp;&nbsp;&nbsp;&nbsp;( created_at, date, field_name, field_value, id, is_pmr, updated_at, user_id )  
        /// 2- <b>{}, status: :unprocessable_entity</b>
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5DiabetesGetSummaryGetAsync(string xSessionId, string xAuthenticationToken, string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/diabetes/get_summary");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/diabetes/get  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>retrieve the corresponding diabetes info to the provided user with the diabetes type and build back the relations if it exists  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- type  
        /// <b>Note in Pregnancy App</b>  
        /// "type" param possible values are => glucose, blood_pressure, weight
        /// # Response/JSON :-
        /// 1- <b>{measurements: Array_of_values}, status: :ok</b>  
        /// &nbsp;&nbsp;Every Value in the array (sorted by date) consists of:  
        /// &nbsp;&nbsp;1- created_at  
        /// &nbsp;&nbsp;2- date  
        /// &nbsp;&nbsp;3- date_timestamp  
        /// &nbsp;&nbsp;4- field_name  
        /// &nbsp;&nbsp;5- field_value  
        /// &nbsp;&nbsp;6- id  
        /// &nbsp;&nbsp;7- is_pmr  
        /// &nbsp;&nbsp;8- updated_at  
        /// &nbsp;&nbsp;9- user_id  
        /// &nbsp;&nbsp;10- relations   => Array_of_relations  
        /// &nbsp;&nbsp;&nbsp;&nbsp;Every relation in the array consists of the same previous attributes/keys  
        /// &nbsp;&nbsp;&nbsp;&nbsp;( created_at, date, field_name, field_value, id, is_pmr, updated_at, user_id )  
        /// 2- <b>{}, status: :unprocessable_entity</b>
        /// </summary>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5DiabetesGetGet(
                string type,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = GetApiV5DiabetesGetGetAsync(type, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/diabetes/get  
        /// <b>Method : </b>GET  
        /// <b>Description : </b>retrieve the corresponding diabetes info to the provided user with the diabetes type and build back the relations if it exists  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- type  
        /// <b>Note in Pregnancy App</b>  
        /// "type" param possible values are => glucose, blood_pressure, weight
        /// # Response/JSON :-
        /// 1- <b>{measurements: Array_of_values}, status: :ok</b>  
        /// &nbsp;&nbsp;Every Value in the array (sorted by date) consists of:  
        /// &nbsp;&nbsp;1- created_at  
        /// &nbsp;&nbsp;2- date  
        /// &nbsp;&nbsp;3- date_timestamp  
        /// &nbsp;&nbsp;4- field_name  
        /// &nbsp;&nbsp;5- field_value  
        /// &nbsp;&nbsp;6- id  
        /// &nbsp;&nbsp;7- is_pmr  
        /// &nbsp;&nbsp;8- updated_at  
        /// &nbsp;&nbsp;9- user_id  
        /// &nbsp;&nbsp;10- relations   => Array_of_relations  
        /// &nbsp;&nbsp;&nbsp;&nbsp;Every relation in the array consists of the same previous attributes/keys  
        /// &nbsp;&nbsp;&nbsp;&nbsp;( created_at, date, field_name, field_value, id, is_pmr, updated_at, user_id )  
        /// 2- <b>{}, status: :unprocessable_entity</b>
        /// </summary>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5DiabetesGetGetAsync(
                string type,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/diabetes/get");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "type", type }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/diabetes/visualized_data  
        /// <b>Method : </b>POST  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- send_email  
        /// 2- type  
        /// <b>Note in Pregnancy App</b>  
        /// "type" param possible values are => glucose, blood_pressure, weight  
        /// # Response/JSON :-
        /// 1- <b>{"message":"mail sent"}, status: :ok</b>  
        /// 2- <b>{:graph => graph_url, count: count}, status: :ok</b>  
        /// 3- <b>{}, status: :unprocessable_entity</b>  
        /// providing Graph to the matched requested diabetes info  
        /// Two cases will apply:  
        /// 1- if the request is to send email contains the graph url to some one provided in the request params e.g "send_email: bla@bla.bla"  
        /// 2- if the request is just to get the corresponding graph to the matched [type, user]  
        /// </summary>
        /// <param name="sendEmail">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5DiabetesVisualizedDataPost(
                string sendEmail,
                string type,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            Task t = CreateApiV5DiabetesVisualizedDataPostAsync(sendEmail, type, xSessionId, xAuthenticationToken, xAppId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// # Specifications :-
        /// <b>URL : </b>/diabetes/visualized_data  
        /// <b>Method : </b>POST  
        /// # Parameters :-
        /// <b>Headers :</b>  
        /// 1- X-Authentication-Token  
        /// 2- X-Session-Id  
        /// 3- X-App-Id : should be sent only when using doctor app  
        /// <b>Params :</b>  
        /// 1- send_email  
        /// 2- type  
        /// <b>Note in Pregnancy App</b>  
        /// "type" param possible values are => glucose, blood_pressure, weight  
        /// # Response/JSON :-
        /// 1- <b>{"message":"mail sent"}, status: :ok</b>  
        /// 2- <b>{:graph => graph_url, count: count}, status: :ok</b>  
        /// 3- <b>{}, status: :unprocessable_entity</b>  
        /// providing Graph to the matched requested diabetes info  
        /// Two cases will apply:  
        /// 1- if the request is to send email contains the graph url to some one provided in the request params e.g "send_email: bla@bla.bla"  
        /// 2- if the request is just to get the corresponding graph to the matched [type, user]  
        /// </summary>
        /// <param name="sendEmail">Required parameter: Example: </param>
        /// <param name="type">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5DiabetesVisualizedDataPostAsync(
                string sendEmail,
                string type,
                string xSessionId,
                string xAuthenticationToken,
                string xAppId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/diabetes/visualized_data");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "send_email", sendEmail },
                { "type", type }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-App-Id", xAppId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 