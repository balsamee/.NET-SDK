/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class SessionController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static SessionController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static SessionController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new SessionController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// sign up by email or mobule number 
        /// </summary>
        /// <param name="individualIdentifier">Required parameter: Example: </param>
        /// <param name="individualFirstName">Required parameter: Example: </param>
        /// <param name="individualLastName">Required parameter: Example: </param>
        /// <param name="individualPassword">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5RegistrationsPost(
                string individualIdentifier,
                string individualFirstName,
                string individualLastName,
                string individualPassword)
        {
            Task t = CreateApiV5RegistrationsPostAsync(individualIdentifier, individualFirstName, individualLastName, individualPassword);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// sign up by email or mobule number 
        /// </summary>
        /// <param name="individualIdentifier">Required parameter: Example: </param>
        /// <param name="individualFirstName">Required parameter: Example: </param>
        /// <param name="individualLastName">Required parameter: Example: </param>
        /// <param name="individualPassword">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5RegistrationsPostAsync(
                string individualIdentifier,
                string individualFirstName,
                string individualLastName,
                string individualPassword)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/registrations");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "individual[identifier]", individualIdentifier ),
                new KeyValuePair<string, object>( "individual[first_name]", individualFirstName ),
                new KeyValuePair<string, object>( "individual[last_name]", individualLastName ),
                new KeyValuePair<string, object>( "individual[password]", individualPassword )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// login by email or mobile number 
        /// </summary>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <param name="sessionIdentifier">Required parameter: nada.magdy+100@nabdacare.com</param>
        /// <param name="sessionPassword">Required parameter: Example: </param>
        /// <return>Returns the Models.Success response from the API call</return>
        public Models.Success CreateApiV5SessionsPost(string xAppId, string sessionIdentifier, string sessionPassword)
        {
            Task<Models.Success> t = CreateApiV5SessionsPostAsync(xAppId, sessionIdentifier, sessionPassword);
            APIHelper.RunTaskSynchronously(t);
            return t.Result;
        }

        /// <summary>
        /// login by email or mobile number 
        /// </summary>
        /// <param name="xAppId">Required parameter: Example: </param>
        /// <param name="sessionIdentifier">Required parameter: nada.magdy+100@nabdacare.com</param>
        /// <param name="sessionPassword">Required parameter: Example: </param>
        /// <return>Returns the Models.Success response from the API call</return>
        public async Task<Models.Success> CreateApiV5SessionsPostAsync(string xAppId, string sessionIdentifier, string sessionPassword)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sessions");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "accept", "application/json" },
                { "X-App-Id", xAppId }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "session[identifier]", sessionIdentifier ),
                new KeyValuePair<string, object>( "session[password]", sessionPassword )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);

            //Error handling using HTTP status codes
            if (_response.StatusCode == 401)
                throw new UnauthorizedException(@"Unauthorized", _context);

            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

            try
            {
                return APIHelper.JsonDeserialize<Models.Success>(_response.Body);
            }
            catch (Exception _ex)
            {
                throw new APIException("Failed to parse the response: " + _ex.Message, _context);
            }
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xFacebookToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5SessionsFacebookLoginPost(string xFacebookToken)
        {
            Task t = CreateApiV5SessionsFacebookLoginPostAsync(xFacebookToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xFacebookToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5SessionsFacebookLoginPostAsync(string xFacebookToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sessions/facebook_login");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Facebook-Token", xFacebookToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, null);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Get individual with more details 
        /// 1 - reservation_request
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5SessionsGetUserGet(string xAuthenticationToken, string xSessionId)
        {
            Task t = GetApiV5SessionsGetUserGetAsync(xAuthenticationToken, xSessionId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Get individual with more details 
        /// 1 - reservation_request
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5SessionsGetUserGetAsync(string xAuthenticationToken, string xSessionId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sessions/get_user");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-Session-Id", xSessionId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// Get individual with more details 
        /// 1 - reservation_request
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5SessionsIndividualDetailsGet(string xAuthenticationToken, string xSessionId)
        {
            Task t = GetApiV5SessionsIndividualDetailsGetAsync(xAuthenticationToken, xSessionId);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// Get individual with more details 
        /// 1 - reservation_request
        /// </summary>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5SessionsIndividualDetailsGetAsync(string xAuthenticationToken, string xSessionId)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/sessions/individual_details");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Authentication-Token", xAuthenticationToken },
                { "X-Session-Id", xSessionId }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 