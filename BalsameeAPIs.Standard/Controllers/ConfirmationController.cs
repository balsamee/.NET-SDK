/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class ConfirmationController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static ConfirmationController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static ConfirmationController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new ConfirmationController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xStatus">Required parameter: Example: </param>
        /// <param name="individualId">Required parameter: Example: </param>
        /// <param name="individualMobileNumber">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5ConfirmationsSendConfirmationSmsPost(string xStatus, string individualId, string individualMobileNumber)
        {
            Task t = CreateApiV5ConfirmationsSendConfirmationSmsPostAsync(xStatus, individualId, individualMobileNumber);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xStatus">Required parameter: Example: </param>
        /// <param name="individualId">Required parameter: Example: </param>
        /// <param name="individualMobileNumber">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5ConfirmationsSendConfirmationSmsPostAsync(string xStatus, string individualId, string individualMobileNumber)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/confirmations/send_confirmation_sms");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Status", xStatus }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "individual[id]", individualId ),
                new KeyValuePair<string, object>( "individual[mobile_number]", individualMobileNumber )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="individualId">Required parameter: Example: </param>
        /// <param name="email">Required parameter: Example: </param>
        /// <param name="confirmationCode">Required parameter: Example: </param>
        /// <param name="xStatus">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5ConfirmationsConfirmEmailGet(
                int individualId,
                string email,
                string confirmationCode,
                string xStatus)
        {
            Task t = GetApiV5ConfirmationsConfirmEmailGetAsync(individualId, email, confirmationCode, xStatus);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="individualId">Required parameter: Example: </param>
        /// <param name="email">Required parameter: Example: </param>
        /// <param name="confirmationCode">Required parameter: Example: </param>
        /// <param name="xStatus">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5ConfirmationsConfirmEmailGetAsync(
                int individualId,
                string email,
                string confirmationCode,
                string xStatus)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/confirmations/confirm_email");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "individual_id", individualId },
                { "email", email },
                { "confirmation_code", confirmationCode }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Status", xStatus }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="individualId">Required parameter: Example: </param>
        /// <param name="mobileNumber">Required parameter: Example: </param>
        /// <param name="confirmationCode">Required parameter: Example: </param>
        /// <param name="xStatus">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5ConfirmationsConfirmMobileGet(
                int individualId,
                double mobileNumber,
                int confirmationCode,
                string xStatus)
        {
            Task t = GetApiV5ConfirmationsConfirmMobileGetAsync(individualId, mobileNumber, confirmationCode, xStatus);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="individualId">Required parameter: Example: </param>
        /// <param name="mobileNumber">Required parameter: Example: </param>
        /// <param name="confirmationCode">Required parameter: Example: </param>
        /// <param name="xStatus">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5ConfirmationsConfirmMobileGetAsync(
                int individualId,
                double mobileNumber,
                int confirmationCode,
                string xStatus)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/confirmations/confirm_mobile");

            //process optional query parameters
            APIHelper.AppendUrlWithQueryParameters(_queryBuilder, new Dictionary<string, object>()
            {
                { "individual_id", individualId },
                { "mobile_number", mobileNumber },
                { "confirmation_code", confirmationCode }
            },ArrayDeserializationFormat,ParameterSeparator);


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Status", xStatus }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xStatus">Required parameter: Example: </param>
        /// <param name="individualId">Required parameter: Example: </param>
        /// <param name="individualEmail">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5ConfirmationsSendConfirmationMailPost(string xStatus, string individualId, string individualEmail)
        {
            Task t = CreateApiV5ConfirmationsSendConfirmationMailPostAsync(xStatus, individualId, individualEmail);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xStatus">Required parameter: Example: </param>
        /// <param name="individualId">Required parameter: Example: </param>
        /// <param name="individualEmail">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5ConfirmationsSendConfirmationMailPostAsync(string xStatus, string individualId, string individualEmail)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/confirmations/send_confirmation_mail");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Status", xStatus }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "individual[id]", individualId ),
                new KeyValuePair<string, object>( "individual[email]", individualEmail )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 