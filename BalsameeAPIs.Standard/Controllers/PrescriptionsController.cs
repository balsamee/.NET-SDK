/*
 * BalsameeAPIs.Standard
 *
 * This file was automatically generated by APIMATIC v2.0 ( https://apimatic.io ).
 */
using System;
using System.Collections.Generic;
using System.Dynamic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Newtonsoft.Json.Converters;
using BalsameeAPIs.Standard;
using BalsameeAPIs.Standard.Utilities;
using BalsameeAPIs.Standard.Http.Request;
using BalsameeAPIs.Standard.Http.Response;
using BalsameeAPIs.Standard.Http.Client;
using BalsameeAPIs.Standard.Exceptions;

namespace BalsameeAPIs.Standard.Controllers
{
    public partial class PrescriptionsController: BaseController
    {
        #region Singleton Pattern

        //private static variables for the singleton pattern
        private static object syncObject = new object();
        private static PrescriptionsController instance = null;

        /// <summary>
        /// Singleton pattern implementation
        /// </summary>
        internal static PrescriptionsController Instance
        {
            get
            {
                lock (syncObject)
                {
                    if (null == instance)
                    {
                        instance = new PrescriptionsController();
                    }
                }
                return instance;
            }
        }

        #endregion Singleton Pattern

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="prescriptionDate">Required parameter: Example: </param>
        /// <param name="prescriptionPrescriber">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0StartDate">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0Num">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0Duration">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0DrugId">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0Dose">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0Notes">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794StartDate">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794Num">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794Duration">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794DrugId">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794Dose">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794Destroy">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void CreateApiV5PrescriptionsPost(
                string xSessionId,
                string xAuthenticationToken,
                string prescriptionDate,
                string prescriptionPrescriber,
                string prescriptionPresDrugsAttributes0StartDate,
                string prescriptionPresDrugsAttributes0Num,
                string prescriptionPresDrugsAttributes0Duration,
                string prescriptionPresDrugsAttributes0DrugId,
                string prescriptionPresDrugsAttributes0Dose,
                string prescriptionPresDrugsAttributes0Notes,
                string prescriptionPresDrugsAttributes1461845708794StartDate,
                string prescriptionPresDrugsAttributes1461845708794Num,
                string prescriptionPresDrugsAttributes1461845708794Duration,
                string prescriptionPresDrugsAttributes1461845708794DrugId,
                string prescriptionPresDrugsAttributes1461845708794Dose,
                string prescriptionPresDrugsAttributes1461845708794Destroy)
        {
            Task t = CreateApiV5PrescriptionsPostAsync(xSessionId, xAuthenticationToken, prescriptionDate, prescriptionPrescriber, prescriptionPresDrugsAttributes0StartDate, prescriptionPresDrugsAttributes0Num, prescriptionPresDrugsAttributes0Duration, prescriptionPresDrugsAttributes0DrugId, prescriptionPresDrugsAttributes0Dose, prescriptionPresDrugsAttributes0Notes, prescriptionPresDrugsAttributes1461845708794StartDate, prescriptionPresDrugsAttributes1461845708794Num, prescriptionPresDrugsAttributes1461845708794Duration, prescriptionPresDrugsAttributes1461845708794DrugId, prescriptionPresDrugsAttributes1461845708794Dose, prescriptionPresDrugsAttributes1461845708794Destroy);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <param name="prescriptionDate">Required parameter: Example: </param>
        /// <param name="prescriptionPrescriber">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0StartDate">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0Num">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0Duration">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0DrugId">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0Dose">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes0Notes">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794StartDate">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794Num">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794Duration">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794DrugId">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794Dose">Required parameter: Example: </param>
        /// <param name="prescriptionPresDrugsAttributes1461845708794Destroy">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task CreateApiV5PrescriptionsPostAsync(
                string xSessionId,
                string xAuthenticationToken,
                string prescriptionDate,
                string prescriptionPrescriber,
                string prescriptionPresDrugsAttributes0StartDate,
                string prescriptionPresDrugsAttributes0Num,
                string prescriptionPresDrugsAttributes0Duration,
                string prescriptionPresDrugsAttributes0DrugId,
                string prescriptionPresDrugsAttributes0Dose,
                string prescriptionPresDrugsAttributes0Notes,
                string prescriptionPresDrugsAttributes1461845708794StartDate,
                string prescriptionPresDrugsAttributes1461845708794Num,
                string prescriptionPresDrugsAttributes1461845708794Duration,
                string prescriptionPresDrugsAttributes1461845708794DrugId,
                string prescriptionPresDrugsAttributes1461845708794Dose,
                string prescriptionPresDrugsAttributes1461845708794Destroy)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/prescriptions");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //append form/field parameters
            var _fields = new List<KeyValuePair<string, Object>>()
            {
                new KeyValuePair<string, object>( "prescription[date]", prescriptionDate ),
                new KeyValuePair<string, object>( "prescription[prescriber]", prescriptionPrescriber ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][0][start_date]", prescriptionPresDrugsAttributes0StartDate ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][0][num]", prescriptionPresDrugsAttributes0Num ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][0][duration]", prescriptionPresDrugsAttributes0Duration ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][0][drug_id]", prescriptionPresDrugsAttributes0DrugId ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][0][dose]", prescriptionPresDrugsAttributes0Dose ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][0][notes]", prescriptionPresDrugsAttributes0Notes ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][1461845708794][start_date]", prescriptionPresDrugsAttributes1461845708794StartDate ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][1461845708794][num]", prescriptionPresDrugsAttributes1461845708794Num ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][1461845708794][duration]", prescriptionPresDrugsAttributes1461845708794Duration ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][1461845708794][drug_id]", prescriptionPresDrugsAttributes1461845708794DrugId ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][1461845708794][dose]", prescriptionPresDrugsAttributes1461845708794Dose ),
                new KeyValuePair<string, object>( "prescription[pres_drugs_attributes][1461845708794][_destroy]", prescriptionPresDrugsAttributes1461845708794Destroy )
            };
            //remove null parameters
            _fields = _fields.Where(kvp => kvp.Value != null).ToList();

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Post(_queryUrl, _headers, _fields);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5ReservationRequests4271PrescriptionsGet(string xSessionId, string xAuthenticationToken)
        {
            Task t = GetApiV5ReservationRequests4271PrescriptionsGetAsync(xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5ReservationRequests4271PrescriptionsGetAsync(string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reservation_requests/4271/prescriptions");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5Prescriptions5a1bf82474617232620b0000Get(string xSessionId, string xAuthenticationToken)
        {
            Task t = GetApiV5Prescriptions5a1bf82474617232620b0000GetAsync(xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5Prescriptions5a1bf82474617232620b0000GetAsync(string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/prescriptions/5a1bf82474617232620b0000");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5ReservationRequests46464634Prescriptions5a1bf82474617232620b0000Get(string xSessionId, string xAuthenticationToken)
        {
            Task t = GetApiV5ReservationRequests46464634Prescriptions5a1bf82474617232620b0000GetAsync(xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5ReservationRequests46464634Prescriptions5a1bf82474617232620b0000GetAsync(string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/reservation_requests/46464634/prescriptions/5a1bf82474617232620b0000");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public void GetApiV5PrescriptionsGet(string xSessionId, string xAuthenticationToken)
        {
            Task t = GetApiV5PrescriptionsGetAsync(xSessionId, xAuthenticationToken);
            APIHelper.RunTaskSynchronously(t);
        }

        /// <summary>
        /// TODO: Add Description
        /// </summary>
        /// <param name="xSessionId">Required parameter: Example: </param>
        /// <param name="xAuthenticationToken">Required parameter: Example: </param>
        /// <return>Returns the void response from the API call</return>
        public async Task GetApiV5PrescriptionsGetAsync(string xSessionId, string xAuthenticationToken)
        {
            //the base uri for api requests
            string _baseUri = Configuration.GetBaseURI();

            //prepare query string for API call
            StringBuilder _queryBuilder = new StringBuilder(_baseUri);
            _queryBuilder.Append("/prescriptions");


            //validate and preprocess url
            string _queryUrl = APIHelper.CleanUrl(_queryBuilder);

            //append request with appropriate headers and parameters
            var _headers = new Dictionary<string,string>()
            {
                { "user-agent", "APIMATIC 2.0" },
                { "X-Session-Id", xSessionId },
                { "X-Authentication-Token", xAuthenticationToken }
            };

            //prepare the API call request to fetch the response
            HttpRequest _request = ClientInstance.Get(_queryUrl,_headers);

            //invoke request and get response
            HttpStringResponse _response = (HttpStringResponse) await ClientInstance.ExecuteAsStringAsync(_request).ConfigureAwait(false);
            HttpContext _context = new HttpContext(_request,_response);
            //handle errors defined at the API level
            base.ValidateResponse(_response, _context);

        }

    }
} 